// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MOBPACK_DUNG_MODEL_H_
#define FLATBUFFERS_GENERATED_MOBPACK_DUNG_MODEL_H_

#include "flatbuffers/flatbuffers.h"

namespace dung {
namespace model {

struct Model;

struct Model FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_MOB_CODE = 6,
    VT_PARTS = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint32_t mob_code() const {
    return GetField<uint32_t>(VT_MOB_CODE, 0);
  }
  const flatbuffers::Vector<uint32_t> *parts() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_PARTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<uint32_t>(verifier, VT_MOB_CODE) &&
           VerifyOffset(verifier, VT_PARTS) &&
           verifier.Verify(parts()) &&
           verifier.EndTable();
  }
};

struct ModelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Model::VT_NAME, name);
  }
  void add_mob_code(uint32_t mob_code) {
    fbb_.AddElement<uint32_t>(Model::VT_MOB_CODE, mob_code, 0);
  }
  void add_parts(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> parts) {
    fbb_.AddOffset(Model::VT_PARTS, parts);
  }
  ModelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ModelBuilder &operator=(const ModelBuilder &);
  flatbuffers::Offset<Model> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<Model>(end);
    return o;
  }
};

inline flatbuffers::Offset<Model> CreateModel(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t mob_code = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> parts = 0) {
  ModelBuilder builder_(_fbb);
  builder_.add_parts(parts);
  builder_.add_mob_code(mob_code);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Model> CreateModelDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t mob_code = 0,
    const std::vector<uint32_t> *parts = nullptr) {
  return dung::model::CreateModel(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      mob_code,
      parts ? _fbb.CreateVector<uint32_t>(*parts) : 0);
}

}  // namespace model
}  // namespace dung

#endif  // FLATBUFFERS_GENERATED_MOBPACK_DUNG_MODEL_H_
